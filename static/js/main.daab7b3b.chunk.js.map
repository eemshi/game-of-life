{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["CELL_SIZE","WIDTH","HEIGHT","Cell","_this$props","this","props","x","y","react_default","a","createElement","className","style","left","concat","top","width","height","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cells","interval","isRunning","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","handleIntervalChange","target","value","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleClear","makeEmptyBoard","handleRandom","random","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","neighbors","dirs","i","length","dir","y1","x1","_this2","console","log","newBoard","calculateNeighbors","setTimeout","_this3","_this$state","backgroundSize","marginBottom","onClick","ref","n","map","cell","Game_Cell","key","onChange","App","src_Game_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.daab7b3b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Game.css';\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\nclass Cell extends Component {\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div className=\"Cell\"\n                 style={{left: `${CELL_SIZE * x + 1}px`,\n                     top: `${CELL_SIZE * y + 1}px`,\n                     width: `${CELL_SIZE - 1}px`,\n                     height: `${CELL_SIZE - 1}px`,\n                }} />\n        );\n    }\n}\n\nclass Game extends Component {\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        interval: 100,\n        isRunning: false,\n    }\n\n    // Create an empty board\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n        return board;\n    }\n\n    // Create cells from this.board\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n        return cells;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    handleClick = (event) => {\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n\n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board\n     * @param {int} x\n     * @param {int} y\n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    runIteration() {\n        console.log('running iteration');\n\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n\n    render() {\n        const { cells, isRunning } = this.state;\n        return(\n            <div>\n                <div className=\"Board\"\n                     style={{ width: WIDTH, height: HEIGHT,\n                        backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\n                        marginBottom: \"25px\" }}\n                        onClick={this.handleClick}\n                        ref={(n) => { this.boardRef = n; }}>\n                        {cells.map(cell => (\n                            <Cell x={cell.x} y={cell.y}\n                                  key={`${cell.x},${cell.y}`} />\n                    ))}\n                </div>\n                <div className=\"controls\">\n                    <span className=\"control-interval\">\n                        Update every\n                        <input value={this.state.interval}\n                               onChange={this.handleIntervalChange} /> millisec\n                    </span>\n                    {isRunning ?\n                        <button className=\"btn btn-danger\"\n                                onClick={this.stopGame}>\n                            Stop</button> :\n                        <button className=\"btn btn-success\"\n                                onClick={this.runGame}>\n                            Run</button>\n                    }\n                    <button className=\"btn btn-warning\" onClick={this.handleRandom}>\n                        Random</button>\n                    <button className=\"btn btn-primary\" onClick={this.handleClear}>\n                        Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ǥąʍ€ ๏ƒ ℓɨƒ€</h1>\n        <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}